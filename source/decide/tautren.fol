;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; GETFOL version 2.001
;; Date: Wed Nov 10 16:29:16 MET 1993
;;
;; This GETFOL file (tautren.fol) was created in GETFOL version 2.001
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                                                          ;;
;;   Copyright (c) 1991-1993 by Fausto Giunchiglia.  All rights reserved.   ;;
;;                                                                          ;;
;;   This software is being provided to you, the LICENSEE, by Fausto        ;;
;;   Giunchiglia, the AUTHOR, under certain rights and obligations.         ;;
;;   By obtaining, using and/or copying this software, you indicate that    ;;
;;   you have read, understood, and will comply with the following terms    ;;
;;   and conditions:                                                        ;;
;;                                                                          ;;
;;   THE AUTHOR MAKES NO REPRESENTATIONS OF WARRANTIES, EXPRESS OR          ;;
;;   IMPLIED.  By way of example, but not limitation, THE AUTHOR MAKES      ;;
;;   NO REPRESENTATIONS OR WARRANTIES OF MERCHANTABILITY OF FITNESS FOR     ;;
;;   ANY PARTICULAR PURPOSE OR THAT THE USE OF THE LICENSED SOFTWARE        ;;
;;   COMPONENTS OR DOCUMENTATION WILL NOT INFRINGE ANY PATENTS,             ;;
;;   COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.                                ;;
;;                                                                          ;;
;;   The AUTHOR shall not be held liable for any direct, indirect or        ;;
;;   consequential damages with respect to any claim by LICENSEE or any     ;;
;;   third party on account of or arising from this Agreement or use of     ;;
;;   this software.  Permission to use, copy, modify and distribute this    ;;
;;   software and its documentation for any purpose and without fee or      ;;
;;   royalty is hereby granted, provided that the above copyright notice    ;;
;;   and disclaimer appears in and on ALL copies of the software and        ;;
;;   documentation, whether original to the AUTHOR or a modified            ;;
;;   version by LICENSEE.                                                   ;;
;;                                                                          ;;
;;   The name of the AUTHOR may not be used in advertising or publicity     ;;
;;   pertaining to distribution of the software without specific, written   ;;
;;   prior permission.  Notice must be given in supporting documentation    ;;
;;   that such distribution is by permission of the AUTHOR.  The AUTHOR     ;;
;;   makes no representations about the suitability of this software for    ;;
;;   any purpose.  It is provided "AS IS" without express or implied        ;;
;;   warranty.  Title to copyright to this software and to any associated   ;;
;;   documentation shall at all times remain with the AUTHOR and LICENSEE   ;;
;;   agrees to preserve same.  LICENSEE agrees to place the appropriate     ;;
;;   copyright notice on any such copies.                                   ;;
;;                                                                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;*****************************************************************
;*                                                               *
;* procedure : tautren                                           *
;* syntax    : (tautren wff)                                     *
;*                                                               *
;* tautren maps a first order formula wff into a propositional   *
;* one according to the following rules.                         *
;* If tautren(wff) = wff' then |- wff' -> |- wff                 *
;*                                                               *
;* - if w is an atomic formula then f(w) = W.                    *
;*                                                               *
;* - if w is a quantwff then f(w) = Pi where Pi is a new         *
;*   sentconst. Occurrences of congruent formulae are rewritten  *
;*   into the same propositional constant.                       *
;*                                                               *
;* - if w = not w1 then f(not w) = not f(w)                      * 
;*                                                               *
;* - f(w1 and w2) = f(w1) and f(w2)                              *
;*                                                               *
;* - f(w1 or w2) = f(w1) or f(w2)                                *
;*                                                               *
;* - f(w1 iff w2) = f(w1) iff f(w2)                              *
;*                                                               *
;*****************************************************************

(DEFLAM tautren (wff) 
 (SEQ
  (sentconst_counter-reset)
  (indconst_counter-reset)
  (wsub*-init)
  (tsub*-init)
  (tautren1 wff)))

(DEFLAM tautren1 (wff)
 (IF (OR (TRUTH wff) (FALSITY wff)) wff
  (IF (OR (OR (SENTSYM wff) (PREDAPPL wff)) (QUANTWFF wff))
   (renpc-get wff)
   (IF (CONNAPPL wff)
    (connappl-mak (connappl-get-conn wff)
                  (tautren1* (connappl-get-args wff)))
    (IF (WFFIF wff) 
     (LET ((rwff (tautren1* (LIST (ifof wff) (thenof wff) (elseof wff)))))
      (mkwffif (FIRST rwff) (FIRST (REST rwff)) (FIRST (REST (REST rwff)))))
     (REMSG1 "tautren1: <wff> with unknown syntax. Fatal error !!!"))))))

(DEFLAM tautren1* (wff*)
 (IF (MTL? wff*) MTL
  (LCONS (tautren1 (FIRST wff*)) (tautren1* (REST wff*)))))

(DEFLAM renpc-get (wff) (renpc-get1 wff (wsub*-get)))
(DEFLAM renpc-get1 (wff wsub*)
 (IF (MTL? wsub*)
  (LET ((pc (pc-mak wff)))
   (SEQ (wsub*-add-wsub (sub-mak wff pc))
        pc))
  (IF (EQUALEXP wff (sub-get-subed (FIRST wsub*)))
   (sub-get-subing (FIRST wsub*))
   (renpc-get1 wff (REST wsub*)))))

(DEFLAM pc-mak (wff)
 (IF (OR (SENTSYM wff) (QUANTWFF wff)) (sentconst-mak)
  (predappl-mak (predappl-get-pred wff)
                (renindconst*-get (predappl-get-args wff)))))

(DEFLAM renindconst-get (trm) (renindconst-get1 trm (tsub*-get)))
(DEFLAM renindconst-get1 (trm tsub*)
 (IF (MTL? tsub*)
  (LET ((ic (indconst-mak (term-get-sort trm))))
   (SEQ (tsub*-add-tsub (sub-mak trm ic))
        ic))
  (IF (EQUALEXP trm (sub-get-subed (FIRST tsub*)))
   (sub-get-subing (FIRST tsub*))
   (renindconst-get1 trm (REST tsub*)))))

(DEFLAM renindconst*-get (trm*)
 (IF (MTL? trm*) MTL
  (LCONS (renindconst-get (FIRST trm*)) (renindconst*-get (REST trm*)))))

(DEFLAM term-get-sort (trm)
 (IF (INDSYM trm) (sort trm)
  (IF (FUNAPPL trm) (fmap-get-out (fmaps (funappl-get-fun trm)))
   Mostgeneral)))
