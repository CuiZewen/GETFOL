;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; FOL version 2.001
;; This file is an FOL source file: ss.hgk
;; Date: Wed Oct 20 10:45:27 MET 1993
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                                                          ;;
;;   Copyright (c) 1986-1987 by Richard Weyhrauch.  All rights reserved.    ;;
;;   Copyright (c) 1987-1988 by Fausto Giunchiglia.  All rights reserved.   ;;
;;                                                                          ;;
;;   This software is being provided to you, the LICENSEE, by Richard       ;;
;;   Weyhrauch and Fausto Giunchiglia, the AUTHORS, under certain rights    ;;
;;   and obligations.  By obtaining, using and/or copying this software,    ;;
;;   you indicate that you have read, understood, and will comply with      ;;
;;   the following terms and conditions:                                    ;;
;;                                                                          ;;
;;   THE AUTHORS MAKE NO REPRESENTATIONS OF WARRANTIES, EXPRESS OR          ;;
;;   IMPLIED.  By way of example, but not limitation, THE AUTHORS MAKE      ;;
;;   NO REPRESENTATIONS OR WARRANTIES OF MERCHANTABILITY OF FITNESS FOR     ;;
;;   ANY PARTICULAR PURPOSE OR THAT THE USE OF THE LICENSED SOFTWARE        ;;
;;   COMPONENTS OR DOCUMENTATION WILL NOT INFRINGE ANY PATENTS,             ;;
;;   COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.                                ;;
;;                                                                          ;;
;;   The AUTHORS shall not be held liable for any direct, indirect or       ;;
;;   consequential damages with respect to any claim by LICENSEE or any     ;;
;;   third party on account of or arising from this Agreement or use of     ;;
;;   this software.  Permission to use, copy, modify and distribute this    ;;
;;   software and its documentation for any purpose and without fee or      ;;
;;   royalty is hereby granted, provided that the above copyright notice    ;;
;;   and disclaimer appears in and on ALL copies of the software and        ;;
;;   documentation, whether original to the AUTHORS or a modified           ;;
;;   version by LICENSEE.                                                   ;;
;;                                                                          ;;
;;   The name of the AUTHORS may not be used in advertising or publicity    ;;
;;   pertaining to distribution of the software without specific, written   ;;
;;   prior permission.  Notice must be given in supporting documentation    ;;
;;   that such distribution is by permission of the AUTHORS.  The AUTHORS   ;;
;;   make no representations about the suitability of this software for     ;;
;;   any purpose.  It is provided "AS IS" without express or implied        ;;
;;   warranty.  Title to copyright to this software and to any associated   ;;
;;   documentation shall at all times remain with the AUTHORS and LICENSEE  ;;
;;   agrees to preserve same.  LICENSEE agrees to place the appropriate     ;;
;;   copyright notice on any such copies.                                   ;;
;;                                                                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;******************************************************************
;*                                                                *
;*                                                                *
;*                      ss.hgk                                    *
;*                                                                *
;*                                                                *
;* This file contains the basic primitives used for the implemen- *
;* tation of the semantic signature.                              *
;*                                                                *
;*                                                                *
;******************************************************************

; *****************************************************************
; *                                                               *
; *                                                               *
; *         The data structures for the semantic signature.       *
; *                                                               *
; * The semantic signature is stored in a number of lists         * 
; * (two for attachments, one for representations, one for        *
; * default representation of sort)                               *
; *                                                               *
; *****************************************************************


;******************************************************************
;*                                                                *
;*                 ATTACHMENT                                     *	
;*                                                                *
;*                                                                *
;******************************************************************

;;; The predicate to check if a constsym has a declared interpretation
;
(DEFSUB INT-HAS-DECLARED (constsym)
 (IF (HGKM-MEMBER constsym (intsyms-get)) TRUE
  FALSE))

;;; The constsym that have an attachment are 
;;; in the variable %INTERPRETED-SYMS%

(DEFSUB  intsyms-get() %INTERPRETED-SYMS%)

(DEFSUB intsyms-del () (SETQ %INTERPRETED-SYMS% MTL))

(DEFSUB intsyms-ini () (SETQ %INTERPRETED-SYMS% MTL))

(DEFSUB intsyms-set (listconstsym)
 (SETQ %INTERPRETED-SYMS% listconstsym))

(DEFSUB intsyms-add (constsym)
 (IF (INT-HAS-CREATED constsym)
  (NOP)
  (intsyms-set (CONS constsym %INTERPRETED-SYMS%))))


;;; The predicate to check if a interpretation has a declared 
;;; preferred name

(DEFSUB PREFNAM-HAS-DECLARED (replabel sexpr)
 (IF (HGKM-MEMBER (int-mak replabel sexpr) (desfuns-get))
  TRUE
  FALSE))

;;; The interpretations that have a preferred name are
;;; in the variable %DESFUNS%

(DEFSUB desfuns-get ()        %DESFUNS%)
(DEFSUB desfuns-del ()        (SETQ %DESFUNS% MTL))
(DEFSUB desfuns-ini ()        (SETQ %DESFUNS% MTL))
(DEFSUB desfuns-set (listint) (SETQ %DESFUNS% listint))
(DEFSUB desfuns-add (int)     (SETQ %DESFUNS% (CONS int %DESFUNS%)))


;******************************************************************
;*                                                                *
;*      REPSENTATIONS                                             *	
;*                                                                *
;*                                                                *
;******************************************************************

;;; The predicate to check if a representation has been declared.
;
(DEFSUB IS-REP-DECLARED(replabel)
 (IF (HGKM-MEMBER replabel (representations-get))
  TRUE
  FALSE))

; The list of the declared representations
; is in the variable %REPRESENTATIONS%

(DEFSUB representations-get ()          %REPRESENTATIONS%)
(DEFSUB representations-del ()          (SETQ %REPRESENTATIONS% MTL))
(DEFSUB representations-ini ()          (SETQ %REPRESENTATIONS% MTL))
(DEFSUB representations-set (replabels) (SETQ %REPRESENTATIONS% replabels))

(DEFSUB representations-add (replabel)
 (SETQ %REPRESENTATIONS% (CONS replabel %REPRESENTATIONS%)))


;******************************************************************
;*                                                                *
;*      DEFAULT REPRESENTATION OF A SORT                          *	
;*                                                                *
;*                                                                *
;******************************************************************

;;; The predicate to check if a sort has a declared default representation
;
(DEFSUB DEFREP-HAS-DECLARED (sort)
 (IF (HGKM-MEMBER sort (defrepsorts-get))
  TRUE
  FALSE))

; The list of the sorts that have a default representation is in %DEFREP-SORTS%

(DEFSUB defrepsorts-get () %DEFREP-SORTS%)

(DEFSUB defrepsorts-del () (SETQ %DEFREP-SORTS% MTL))

(DEFSUB defrepsorts-ini () (SETQ %DEFREP-SORTS% MTL))

(DEFSUB defrepsorts-set (sortlist) 
 (SETQ %DEFREP-SORTS% sortlist))

(DEFSUB defrepsorts-add (sort)
 (SETQ %DEFREP-SORTS% (CONS sort %DEFREP-SORTS%)))


;******************************************************************
;*                                                                *
;*  SINTAX                                                        *
;*    (sig-sem-ini)                                               *
;*                                                                *
;*  DESCRIPTION                                                   *
;*                                                                *
;*  sig-sem-ini initialises the semantic signature                *
;*                                                                *
;******************************************************************

(DEFLAM sig-sem-ini()
 (SEQ
  (intsyms-ini)
  (desfuns-ini)
  (representations-ini)
  (defrepsorts-ini)))
