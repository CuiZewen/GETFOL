(DEFLAM expeval1 (exp amf)
 (IF (CWFF exp) 
  (LET ((wff1 (rewrite-call exp amf)))
   (IF (NOT (EQUAL exp wff1)) (expeval wff1 amf)
    (LET ((wff2 (cwffeval exp amf)))
     (IF (NOT (EQUAL exp wff2))
      (LET ((wff3 (rewrite-call wff2 amf)))
       (IF  (NOT (EQUAL wff2 wff3))(expeval wff3 amf)
        wff2))
      exp))))
  (IF (AWFF exp)  
   (LET ((wff1 (awffeval exp amf)))
    (IF (OR (TRUTH wff1) (FALSITY wff1))
     (SEQ
      (EVAL-printexp2 "Evaluating " exp " gives " wff1)
      wff1)
     (SEQ 
      (EVAL-printexp1 "Evaluating " exp " doesn' t work")
      (LET ((wff2 (rewrite-call wff1 amf)))
       (IF  (NOT (EQUAL wff1 wff2))(expeval wff2 amf)
        wff1)))))
   (IF (TERM exp)
    (LET ((mng (trmeval exp amf)))
     (SEQ
       (IF (NOT (VALUE-UNDEF? (mng-get-value mng)))
         (EVAL-printexp3 "Evaluating " exp " gives " (mng-get-exp mng) " underyling " (mng-get-value mng))
         (EVAL-printexp1 "Evaluating " exp " doesn' t work"))
       (IF (OR (VALUE-UNDEF? (mng-get-value mng)) (EQUAL (mng-get-exp mng) exp))
         (LET ((trm1 (rewrite-call (mng-get-exp mng) amf)))
          (IF  (NOT (EQUAL  (mng-get-exp mng) trm1))
             (mng-merge mng (expeval trm1 amf))
             mng))
         mng)))
    (ERRMES-printexp
     exp " is not an exp. Fatal error during evaluation.")))))
